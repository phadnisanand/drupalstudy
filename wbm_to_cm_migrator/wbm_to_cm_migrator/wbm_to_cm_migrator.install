<?php

use Drupal\Core\Database\Database;
use Drupal\node\Entity\Node;
use Drupal\workflows\Entity\Workflow;

/**
 * Post update hook: migrate Workbench Moderation states to Content Moderation.
 */
function wbm_to_cm_migrator_post_update_migrate_workbench_moderation(array &$sandbox) {
  $connection = Database::getConnection();

  $state_map = [
    'draft' => 'draft',
    'needs_review' => 'needs_review',
    'needs_review_revision' => 'needs_review',
    'published' => 'published',
    'archived' => 'archived',
  ];

  $workflow_id = 'wbm_migrated_workflow';
  if (!\Drupal::entityTypeManager()->getStorage('workflow')->load($workflow_id)) {
    $workflow = Workflow::create([
      'id' => $workflow_id,
      'label' => 'Migrated Workbench Workflow',
      'type' => 'content_moderation',
    ]);
    $workflow->save();
  }

  if (!$connection->schema()->tableExists('workbench_moderation_state')) {
    \Drupal::logger('wbm_to_cm_migrator')->warning('workbench_moderation_state table not found. Nothing to migrate.');
    return;
  }

  $query = $connection->select('workbench_moderation_state', 'w')
    ->fields('w', ['entity_type', 'entity_id', 'revision_id', 'moderation_state']);
  $results = $query->execute();

  $node_storage = \Drupal::entityTypeManager()->getStorage('node');
  $count = 0;

  foreach ($results as $row) {
    if ($row->entity_type !== 'node') {
      continue;
    }
    $old_state = (string) $row->moderation_state;
    $new_state = $state_map[$old_state] ?? 'draft';

    try {
      if (!empty($row->revision_id)) {
        $revision = $node_storage->loadRevision($row->revision_id);
        if ($revision && $revision->hasField('moderation_state')) {
          $revision->set('moderation_state', $new_state);
          $revision->save();
          $count++;
          continue;
        }
      }
      $node = $node_storage->load($row->entity_id);
      if ($node && $node->hasField('moderation_state')) {
        $node->set('moderation_state', $new_state);
        $node->save();
        $count++;
      }
    } catch (\Exception $e) {
      \Drupal::logger('wbm_to_cm_migrator')->error('Error migrating node @nid rev @rid: @msg', [
        '@nid' => $row->entity_id,
        '@rid' => $row->revision_id,
        '@msg' => $e->getMessage(),
      ]);
    }
  }

  \Drupal::logger('wbm_to_cm_migrator')->notice('Migration completed. Migrated @count node revisions.', ['@count' => $count]);
}
